# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'window.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(702, 409)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(290, 220, 101, 51))
        self.pushButton.setObjectName("pushButton")
        self.textBrowser = QtWidgets.QTextBrowser(Form)
        self.textBrowser.setGeometry(QtCore.QRect(10, 290, 681, 81))
        self.textBrowser.setFrameShape(QtWidgets.QFrame.Box)
        self.textBrowser.setFrameShadow(QtWidgets.QFrame.Raised)
        self.textBrowser.setLineWidth(1)
        self.textBrowser.setMidLineWidth(0)
        self.textBrowser.setObjectName("textBrowser")
        self.radioButton = QtWidgets.QRadioButton(Form)
        self.radioButton.setGeometry(QtCore.QRect(90, 140, 101, 31))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(Form)
        self.radioButton_2.setGeometry(QtCore.QRect(210, 140, 101, 31))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(Form)
        self.radioButton_3.setGeometry(QtCore.QRect(330, 140, 81, 31))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(Form)
        self.radioButton_4.setGeometry(QtCore.QRect(430, 140, 161, 31))
        self.radioButton_4.setObjectName("radioButton_4")
        self.checkBox = QtWidgets.QCheckBox(Form)
        self.checkBox.setGeometry(QtCore.QRect(90, 180, 161, 20))
        self.checkBox.setChecked(False)
        self.checkBox.setObjectName("checkBox")
        self.checkBox_2 = QtWidgets.QCheckBox(Form)
        self.checkBox_2.setGeometry(QtCore.QRect(270, 180, 61, 20))
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_3 = QtWidgets.QCheckBox(Form)
        self.checkBox_3.setGeometry(QtCore.QRect(340, 180, 61, 20))
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_4 = QtWidgets.QCheckBox(Form)
        self.checkBox_4.setGeometry(QtCore.QRect(410, 180, 81, 20))
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_5 = QtWidgets.QCheckBox(Form)
        self.checkBox_5.setGeometry(QtCore.QRect(500, 180, 101, 20))
        self.checkBox_5.setObjectName("checkBox_5")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(130, 10, 531, 31))
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label.setText("")
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(20, 10, 101, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(20, 50, 101, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(130, 50, 531, 31))
        self.label_2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(130, 90, 531, 31))
        self.label_3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 90, 101, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(20, 380, 41, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(60, 380, 54, 16))
        self.label_5.setObjectName("label_5")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)
        self.set_signal()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "语音识别"))
        self.pushButton.setText(_translate("Form", "执行"))
        self.radioButton.setText(_translate("Form", "从文件输入"))
        self.radioButton_2.setText(_translate("Form", "从耳机输入"))
        self.radioButton_3.setText(_translate("Form", "写入文件"))
        self.radioButton_4.setText(_translate("Form", "从耳机输入(多线程)"))
        self.checkBox.setText(_translate("Form", "从视频文件提取音频"))
        self.checkBox_2.setText(_translate("Form", "英文"))
        self.checkBox_3.setText(_translate("Form", "中文"))
        self.checkBox_4.setText(_translate("Form", "噪声适应"))
        self.checkBox_5.setText(_translate("Form", "按语法识别"))
        self.pushButton_2.setText(_translate("Form", "输入文件"))
        self.pushButton_3.setText(_translate("Form", "输出位置"))
        self.pushButton_4.setText(_translate("Form", "语法模型"))
        self.label_4.setText(_translate("Form", "状态："))
        self.label_5.setText(_translate("Form", "空闲"))

    def set_signal(self):
        import sys
        from threading import Thread
        from PyQt5.QtWidgets import QFileDialog

        class EmittingStr(QtCore.QObject):
            textWritten = QtCore.pyqtSignal(str)

            def write(self, text):
                self.textWritten.emit(str(text))

            def flush(self):
                pass

        def output_written(text):
            cursor = self.textBrowser.textCursor()
            cursor.movePosition(QtGui.QTextCursor.End)
            cursor.insertText(text)
            self.textBrowser.setTextCursor(cursor)
            self.textBrowser.ensureCursorVisible()

        def openfile():
            self.label.setText(QFileDialog.getOpenFileName(self.pushButton_2, '选择文件', '', '输入文件(*.*)')[0])

        def open_directory():
            self.label_2.setText(QFileDialog.getExistingDirectory(self.pushButton_2, '选择文件', ''))

        def open_grammar():
            self.label_3.setText(QFileDialog.getOpenFileName(self.pushButton_2, '选择文件', '', '语法模型(*.gram)')[0])

        def execute():
            if self.radioButton.isChecked():
                if self.checkBox.isChecked():
                    from function.extract_audio import extract_audio
                    file = extract_audio(self.label.text(), self.label_2.text())
                else:
                    file = self.label.text()
                from function.audio_transcribe import audio_transcribe
                try:
                    if self.checkBox_2.isChecked():
                        thread = Thread(target=lambda: audio_transcribe('en', file, self.checkBox_4.isChecked(),
                                                                        self.label_3.text() if self.checkBox_5.isChecked() else None))
                        thread.start()
                        Thread(target=lambda: update(thread)).start()
                    if self.checkBox_3.isChecked():
                        thread = Thread(target=lambda: audio_transcribe('cn', file, self.checkBox_4.isChecked()))
                        thread.start()
                        Thread(target=lambda: update(thread)).start()
                except FileNotFoundError:
                    print('FileNotFound!')

            # microphone_recognition
            if self.radioButton_2.isChecked():
                from function.microphone_recognition import microphone_recognition
                if self.checkBox_2.isChecked():
                    thread = Thread(target=lambda: microphone_recognition('en', self.checkBox_4.isChecked(),
                                                                          self.label_3.text() if self.checkBox_5.isChecked() else None))
                    thread.start()
                    Thread(target=lambda: update(thread)).start()
                if self.checkBox_3.isChecked():
                    thread = Thread(target=lambda: microphone_recognition('cn', self.checkBox_4.isChecked()))
                    thread.start()
                    Thread(target=lambda: update(thread)).start()

            if self.radioButton_3.isChecked():
                from function.write_audio import write_audio
                thread = Thread(target=lambda: write_audio(self.checkBox_4.isChecked(), self.label_2.text()))
                thread.start()
                Thread(target=lambda: update(thread)).start()

            if self.radioButton_4.isChecked():
                from function.threaded_workers import threaded_workers
                if self.checkBox_2.isChecked():
                    thread = Thread(target=lambda: threaded_workers('en', self.checkBox_4.isChecked(),
                                                                    self.label_3.text() if self.checkBox_5.isChecked() else None))
                    thread.start()
                    Thread(target=lambda: update(thread)).start()
                if self.checkBox_3.isChecked():
                    thread = Thread(target=lambda: threaded_workers('cn', self.checkBox_4.isChecked()))
                    thread.start()
                    Thread(target=lambda: update(thread)).start()

        def update(thread):
            self.label_5.setText('运行中')
            while thread.is_alive():
                pass
            self.label_5.setText('空闲')

        sys.stdout = EmittingStr()
        sys.stdout.textWritten.connect(output_written)
        self.pushButton_2.clicked.connect(openfile)
        self.pushButton_3.clicked.connect(open_directory)
        self.pushButton_4.clicked.connect(open_grammar)
        self.pushButton.clicked.connect(execute)
